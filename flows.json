[
    {
        "id": "5ce7fc836f99f71a",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b6186ea8bd2f98b",
        "type": "tab",
        "label": "MQTT to InfluxDB",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6e3555f3a74bbd02",
        "type": "mqtt-broker",
        "name": "mosquitto broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dbf835e12a2a5842",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "mqtt_data",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "mqtt_broker_1",
        "type": "mqtt-broker",
        "name": "mosquitto broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true
    },
    {
        "id": "influxdb_conf",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "mqtt_data",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "mqttBroker",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "influxDBConfig",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "bb6aef133f05b5d0",
        "type": "mqtt in",
        "z": "0b6186ea8bd2f98b",
        "name": "MQTT OEE",
        "topic": "#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "mqttBroker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "f427c3279b5e1321"
            ]
        ]
    },
    {
        "id": "f427c3279b5e1321",
        "type": "function",
        "z": "0b6186ea8bd2f98b",
        "name": "Fix JSON Format",
        "func": "// Convert Buffer to String (UTF-8)\nlet payload = msg.payload;\n\nif (Buffer.isBuffer(payload)) {\n    payload = payload.toString('utf8');\n}\n\n// Remove invisible control characters from the beginning and end\npayload = payload.replace(/^\\uFEFF|\\s+$/g, '');\n\n// Remove unnecessary commas\npayload = payload.replace(/,(\\s*[}\\]])/g, '$1');\n\n// Remove all invisible characters (e.g., BOM)\npayload = payload.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '').trim();\n\ntry {\n    // Parse the string as JSON\n    msg.payload = JSON.parse(payload);\n    return msg;\n} catch (e) {\n    // Log an error if JSON parsing fails\n    node.error('JSON parsing error: ' + e.message + ' | ' + payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "72e42ab073d45ca6"
            ]
        ]
    },
    {
        "id": "72e42ab073d45ca6",
        "type": "function",
        "z": "0b6186ea8bd2f98b",
        "name": "Parse MQTT Payload",
        "func": "// Parse and sanitize the payload\nconst fields = {};\nObject.entries(msg.payload).forEach(([key, value]) => {\n    if (key === 'machineState' && (typeof value !== 'string' || value === 'undefined')) {\n        // Set a default value if machineState is invalid\n        fields[key] = 'Unknown';\n    } else if (typeof value === 'number') {\n        fields[key] = parseFloat(value.toFixed(2)); // Round to 2 decimals\n    } else if (typeof value === 'string') {\n        fields[key] = value;\n    }\n});\n\n// Construct payload for InfluxDB\nmsg.payload = {\n    measurement: 'oee_data',\n    fields: fields,\n    tags: {\n        source: 'mqtt_oee',\n        location: 'factory_floor'\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "61290609a2b1980a"
            ]
        ]
    },
    {
        "id": "b6380f29f702e44f",
        "type": "influxdb out",
        "z": "0b6186ea8bd2f98b",
        "influxdb": "influxDBConfig",
        "name": "mqtt_logs",
        "measurement": "oee_data",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "mqtt_logs",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1120,
        "y": 120,
        "wires": []
    },
    {
        "id": "61290609a2b1980a",
        "type": "function",
        "z": "0b6186ea8bd2f98b",
        "name": "function 1",
        "func": "// Example of extracting individual variables from msg.payload\nlet oee = msg.payload.fields.OEE;\nlet performance = msg.payload.fields.Performance;\nlet quality = msg.payload.fields.Quality;\nlet availability = msg.payload.fields.Availability;\nlet machineState = msg.payload.fields.MachineState;\nlet goodParts = msg.payload.fields.GoodParts;\nlet badParts = msg.payload.fields.BadParts;\nlet productWeight = msg.payload.fields.ProductWeight;\n\n// You can now use these variables as needed\n// For example, by assigning them to msg.payload\nmsg.payload = {\n    oee: oee,\n    performance: performance,\n    quality: quality,\n    availability: availability,\n    machineState: machineState,\n    goodParts: goodParts,\n    badParts: badParts,\n    productWeight: productWeight\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 120,
        "wires": [
            [
                "99b6f26f086ca94c",
                "b6380f29f702e44f"
            ]
        ]
    },
    {
        "id": "99b6f26f086ca94c",
        "type": "debug",
        "z": "0b6186ea8bd2f98b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ba36ff4779b8e54",
        "type": "http request",
        "z": "0b6186ea8bd2f98b",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8086/query?q=CREATE DATABASE mqtt_logs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0b1f2a3172e2bae5",
        "type": "inject",
        "z": "0b6186ea8bd2f98b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 400,
        "wires": [
            [
                "7ba36ff4779b8e54"
            ]
        ]
    }
]