[
    {
        "id": "tab1",
        "type": "tab",
        "label": "MQTT to InfluxDB",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6e3555f3a74bbd02",
        "type": "mqtt-broker",
        "name": "mosquitto broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dbf835e12a2a5842",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "mqtt_data",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "mqtt_broker_1",
        "type": "mqtt-broker",
        "name": "mosquitto broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true
    },
    {
        "id": "influxdb_conf",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "mqtt_data",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "mqttBroker",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "influxDBConfig",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "mqtt_logs",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "mqttIn",
        "type": "mqtt in",
        "z": "tab1",
        "name": "MQTT OEE",
        "topic": "#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "mqttBroker",
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "fixJSON"
            ]
        ]
    },
    {
        "id": "fixJSON",
        "type": "function",
        "z": "tab1",
        "name": "Fix JSON Format",
        "func": "// Konwersja Buffer -> String (UTF-8)\nlet payload = msg.payload;\n\nif (Buffer.isBuffer(payload)) {\n    payload = payload.toString('utf8');\n}\n\n// Usuń niewidoczne znaki sterujące z początku i końca\npayload = payload.replace(/^\\uFEFF|\\s+$/g, '');\n\n// Usuń ewentualne zbędne przecinki\npayload = payload.replace(/,(\\s*[}\\]])/g, '$1');\n\n// Usuń wszystkie znaki niewidoczne (np. BOM)\npayload = payload.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '').trim();\n\ntry {\n    msg.payload = JSON.parse(payload);\n    return msg;\n} catch (e) {\n    node.error('Błąd parsowania JSON: ' + e.message + ' | ' + payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "parsePayload"
            ]
        ]
    },
    {
        "id": "parsePayload",
        "type": "function",
        "z": "tab1",
        "name": "Parse MQTT Payload",
        "func": "// Sprawdź, czy payload jest obiektem\nif (typeof msg.payload !== 'object') {\n    node.error('Nieprawidłowy format payload; oczekiwano obiektu');\n    return null;\n}\n\ntry {\n    // Przygotuj obiekt fields\n    const fields = {};\n    for (const [key, value] of Object.entries(msg.payload)) {\n        const numValue = parseFloat(value);\n        if (!isNaN(numValue)) {\n            fields[key] = numValue;\n        }\n    }\n\n    // Przygotuj obiekt tags\n    const tags = {\n        source: 'mqtt_oee',\n        location: 'factory_floor'\n    };\n\n    // Ustawienie payload dla węzła influxdb out\n    msg.payload = {\n        measurement: 'oee_data',\n        fields: fields,\n        tags: tags\n    };\n\n    return msg;\n} catch (error) {\n    node.error('Błąd podczas formatowania danych: ' + error.message);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "d1ac1d15e21a5986"
            ]
        ]
    },
    {
        "id": "influxDBOut",
        "type": "influxdb out",
        "z": "tab1",
        "influxdb": "influxDBConfig",
        "name": "mqtt_logs",
        "measurement": "oee_data",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "mqtt_logs",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 840,
        "y": 100,
        "wires": []
    },
    {
        "id": "d1ac1d15e21a5986",
        "type": "function",
        "z": "tab1",
        "name": "function 1",
        "func": "// Przykład wyodrębniania poszczególnych zmiennych z msg.payload\nlet oee = msg.payload.fields.OEE;\nlet performance = msg.payload.fields.Performance;\nlet quality = msg.payload.fields.Quality;\nlet availability = msg.payload.fields.Availability;\nlet machineState = msg.payload.fields.MachineState;\nlet goodParts = msg.payload.fields.GoodParts;\nlet badParts = msg.payload.fields.BadParts;\nlet productWeight = msg.payload.fields.ProductWeight;\n\n// Możesz teraz użyć tych zmiennych według potrzeb\n// Na przykład, przypisując je do msg.payload\nmsg.payload = {\n    oee: oee,\n    performance: performance,\n    quality: quality,\n    availability: availability,\n    machineState: machineState,\n    goodParts: goodParts,\n    badParts: badParts,\n    productWeight: productWeight\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "9b66c4db54a1ad65",
                "influxDBOut"
            ]
        ]
    },
    {
        "id": "9b66c4db54a1ad65",
        "type": "debug",
        "z": "tab1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    }
]